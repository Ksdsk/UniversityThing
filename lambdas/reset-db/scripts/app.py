import json
import boto3
import os
import mysql.connector
from botocore.exceptions import ClientError

def get_db_creds(session, secret_name, region_name):
    
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        print(e)
        raise Exception(e)
    
    creds = json.loads(get_secret_value_response["SecretString"])
    return creds["username"], creds["password"]

def lambda_handler(event, context):
    
    try:
        if not event:
            raise AttributeError("No event")
        
        if 'body' not in event or not event['body']:
            raise AttributeError("Missing event body")

        # Set up DB information
        session = boto3.session.Session()

        db_username, db_password = get_db_creds(session, os.environ["RDS_SECRET_NAME"], "us-east-1")
        db_hostname = os.environ["RDS_HOSTNAME"]
        db_port = int(os.environ["RDS_PORT"])
        db_name = os.environ["RDS_DB_NAME"]

        connection = mysql.connector.connect(host=db_hostname, user=db_username, password=db_password, port=db_port)
        cursor = connection.cursor()
        setup_query = """
-- MySQL Script generated by MySQL Workbench
-- Thu May 23 22:47:06 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema university-thing-database
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `university-thing-database` ;

-- -----------------------------------------------------
-- Schema university-thing-database
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `university-thing-database` DEFAULT CHARACTER SET utf8 ;
USE `university-thing-database` ;

-- -----------------------------------------------------
-- Table `university-thing-database`.`school`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`school` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`school` (
  `school_id` INT NOT NULL AUTO_INCREMENT,
  `school_name` VARCHAR(128) NULL,
  PRIMARY KEY (`school_id`),
  UNIQUE INDEX `school_id_UNIQUE` (`school_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`category` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`category` (
  `category_id` INT NOT NULL AUTO_INCREMENT,
  `school_id` INT NOT NULL,
  `category_code` VARCHAR(45) NOT NULL,
  `category_name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`category_id`),
  UNIQUE INDEX `category_id_UNIQUE` (`category_id` ASC) VISIBLE,
  INDEX `fk_category_school_idx` (`school_id` ASC) VISIBLE,
  CONSTRAINT `fk_category_school`
    FOREIGN KEY (`school_id`)
    REFERENCES `university-thing-database`.`school` (`school_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`campus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`campus` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`campus` (
  `campus_id` INT NOT NULL AUTO_INCREMENT,
  `school_id` INT NOT NULL,
  `campus_name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`campus_id`),
  UNIQUE INDEX `campus_id_UNIQUE` (`campus_id` ASC) VISIBLE,
  INDEX `fk_campus_school1_idx` (`school_id` ASC) VISIBLE,
  CONSTRAINT `fk_campus_school1`
    FOREIGN KEY (`school_id`)
    REFERENCES `university-thing-database`.`school` (`school_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`course` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`course` (
  `course_id` INT NOT NULL AUTO_INCREMENT,
  `category_id` INT NOT NULL,
  `course_name` VARCHAR(128) NOT NULL,
  `course_code` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`course_id`),
  UNIQUE INDEX `course_id_UNIQUE` (`course_id` ASC) VISIBLE,
  INDEX `fk_course_category1_idx` (`category_id` ASC) VISIBLE,
  CONSTRAINT `fk_course_category1`
    FOREIGN KEY (`category_id`)
    REFERENCES `university-thing-database`.`category` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`term`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`term` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`term` (
  `term_id` VARCHAR(4) NOT NULL,
  PRIMARY KEY (`term_id`),
  UNIQUE INDEX `term_id_UNIQUE` (`term_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`instructor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`instructor` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`instructor` (
  `instructor_id` INT NOT NULL AUTO_INCREMENT,
  `school_id` INT NOT NULL,
  `instructor_name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`instructor_id`),
  UNIQUE INDEX `instructor_id_UNIQUE` (`instructor_id` ASC) VISIBLE,
  INDEX `fk_instructor_school1_idx` (`school_id` ASC) VISIBLE,
  CONSTRAINT `fk_instructor_school1`
    FOREIGN KEY (`school_id`)
    REFERENCES `university-thing-database`.`school` (`school_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`course_offerings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`course_offerings` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`course_offerings` (
  `course_offerings_id` INT NOT NULL,
  `course_id` INT NOT NULL,
  `term_id` VARCHAR(4) NOT NULL,
  `campus_id` INT NULL,
  `instructor_id` INT NULL,
  PRIMARY KEY (`course_offerings_id`),
  INDEX `fk_course_offerings_course1_idx` (`course_id` ASC) VISIBLE,
  INDEX `fk_course_offerings_campus1_idx` (`campus_id` ASC) VISIBLE,
  INDEX `fk_course_offerings_instructor1_idx` (`instructor_id` ASC) VISIBLE,
  INDEX `fk_course_offerings_term1_idx` (`term_id` ASC) VISIBLE,
  CONSTRAINT `fk_course_offerings_course1`
    FOREIGN KEY (`course_id`)
    REFERENCES `university-thing-database`.`course` (`course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_offerings_campus1`
    FOREIGN KEY (`campus_id`)
    REFERENCES `university-thing-database`.`campus` (`campus_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_offerings_instructor1`
    FOREIGN KEY (`instructor_id`)
    REFERENCES `university-thing-database`.`instructor` (`instructor_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_offerings_term1`
    FOREIGN KEY (`term_id`)
    REFERENCES `university-thing-database`.`term` (`term_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`syllabus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`syllabus` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`syllabus` (
  `syllabus_id` INT NOT NULL AUTO_INCREMENT,
  `course_offerings_id` INT NOT NULL,
  `syllabus_s3_object_name` VARCHAR(1000) NOT NULL,
  `syllabus_s3_bucket_name` VARCHAR(1000) NOT NULL DEFAULT 'university-syllabus-bucket',
  `syllabus_s3_region` VARCHAR(128) NOT NULL DEFAULT 'us-east-1',
  `syllabus_uploaded_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `syllabus_is_flagged` TINYINT NOT NULL DEFAULT 0,
  `syllabus_flag_message` VARCHAR(1000) NULL,
  PRIMARY KEY (`syllabus_id`),
  UNIQUE INDEX `content_id_UNIQUE` (`syllabus_id` ASC) VISIBLE,
  INDEX `fk_syllabus_course_offerings1_idx` (`course_offerings_id` ASC) VISIBLE,
  CONSTRAINT `fk_syllabus_course_offerings1`
    FOREIGN KEY (`course_offerings_id`)
    REFERENCES `university-thing-database`.`course_offerings` (`course_offerings_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`metadata`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`metadata` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`metadata` (
  `metadata_id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `metadata_course_median_letter_grade` VARCHAR(2) NULL,
  PRIMARY KEY (`metadata_id`),
  UNIQUE INDEX `metadata_id_UNIQUE` (`metadata_id` ASC) VISIBLE,
  INDEX `fk_metadata_course1_idx` (`course_id` ASC) VISIBLE,
  CONSTRAINT `fk_metadata_course1`
    FOREIGN KEY (`course_id`)
    REFERENCES `university-thing-database`.`course` (`course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university-thing-database`.`course_reviews`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university-thing-database`.`course_reviews` ;

CREATE TABLE IF NOT EXISTS `university-thing-database`.`course_reviews` (
  `course_reviews_id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `term_id` VARCHAR(4) NOT NULL,
  `course_review_text` VARCHAR(1000) NOT NULL,
  `course_review_difficulty` INT NULL,
  `course_reviewer_letter_grade` VARCHAR(2) NULL,
  PRIMARY KEY (`course_reviews_id`),
  UNIQUE INDEX `course_reviews_id_UNIQUE` (`course_reviews_id` ASC) VISIBLE,
  INDEX `fk_course_reviews_course1_idx` (`course_id` ASC) VISIBLE,
  INDEX `fk_course_reviews_term1_idx` (`term_id` ASC) VISIBLE,
  CONSTRAINT `fk_course_reviews_course1`
    FOREIGN KEY (`course_id`)
    REFERENCES `university-thing-database`.`course` (`course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_reviews_term1`
    FOREIGN KEY (`term_id`)
    REFERENCES `university-thing-database`.`term` (`term_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
"""
        insert_query = """
-- Inserting Schools
INSERT INTO school(school_name) VALUES ("Dalhousie University"), ("McGill University");


-- Inserting Categories for Dalhousie
INSERT INTO category(school_id, category_code, category_name) VALUES 
(1, "ASSC", "Arts and Social Sciences"),
(1, "BIOL", "Biology"),
(1, "BUSI", "Business"),
(1, "CHEM", "Chemistry"),
(1, "COMM", "Commerce"),
(1, "CSCI", "Computer Science"),
(1, "DGIN", "Digital Innovation"),
(1, "ECON", "Economics"),
(1, "ENGL", "English"),
(1, "FILM", "Film Studies"),
(1, "GWST", "Gender and Women's Studies"),
(1, "MGMT", "Management"),
(1, "MATH", "Mathematics"),
(1, "PSYO", "Psychology"),
(1, "STAT", "Statistics"),
(1, "SUST", "Sustainability");
-- Inserting Categories For McGill 
INSERT INTO category(school_id, category_code, category_name) VALUES 
(2, "COMP", "Computer Science"),
(2, "MATH", "Mathematics");


-- Inserting Campus for Dalhousie
INSERT INTO campus(school_id, campus_name) VALUES
(1, "Studley Campus"),
(1, "Sexton Campus"),
(1, "Carleton Campus"),
(1, "Agricultural Campus"),
(1, "Yarmouth Campus"),
(1, "Saint John Campus");
-- Inserting Campus for McGill
INSERT INTO campus(school_id, campus_name) VALUES
(2, "Downtown Campus"),
(2, "Macdonald Campus");
        """
        
        # Execute queries
        for statement in setup_query.split(";"):
            if statement.strip():
                cursor.execute(statement)
        
        connection.commit()
        print("DB Setup Complete")

        for statement in insert_query.split(";"):
            if statement.strip():
                cursor.execute(statement)
        
        connection.commit()
        print("DB Insert Complete")

        cursor.execute("SELECT * FROM school")
        result = cursor.fetchall()
        connection.close()

        body = {
            "message": f"DB successfully created and reset to default.",
            "schools": result
        }

        return { 
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json'
            },
            'body': json.dumps(body)
        }
    except AttributeError as e:
        print(f"Attribute Error: {str(e)}") # Log Error
        body = {
            "message": str(e)
        }
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json'
            },
            'body': json.dumps(body)
        }
    except Exception as e:
        print(f"Error: {str(e)}") # Log Error
        body = {
            "message": str(e)
        }

        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json'
            },
            'body': json.dumps(body)
        }
    
